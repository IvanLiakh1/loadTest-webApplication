import { startTesting } from "./runner.js";
import readline from "readline";
import Test from "../models/test.js";
import { readTestCases, saveTestCase } from "./testCases.js";

let test;
let save;

const rl = readline.createInterface({
	input: process.stdin,
	output: process.stdout,
});

function askQuestion(question) {
	return new Promise((resolve) => rl.question(question, (answer) => resolve(answer.trim())));
}

function isYes(input) {
	return ["y", "yes", "—Ç–∞–∫", "1"].includes(input.toLowerCase());
}

async function newTestCase() {
	const url = await askQuestion("–í–≤–µ–¥—ñ—Ç—å URL –¥–ª—è —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è: ");
	const duration = parseInt(await askQuestion("–í–≤–µ–¥—ñ—Ç—å —Ç—Ä–∏–≤–∞–ª—ñ—Å—Ç—å —Ç–µ—Å—Ç—É (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö): "), 10);
	const concurrency = parseInt(await askQuestion("–í–≤–µ–¥—ñ—Ç—å –∫—ñ–ª—å–∫—ñ—Å—Ç—å –æ–¥–Ω–æ—á–∞—Å–Ω–∏—Ö –∑–∞–ø–∏—Ç—ñ–≤: "), 10);
	const method = (await askQuestion("–í–≤–µ–¥—ñ—Ç—å –º–µ—Ç–æ–¥ (GET, POST, PUT, DELETE): ")).toUpperCase();
	const token = await askQuestion("–í–≤–µ–¥—ñ—Ç—å —Ç–æ–∫–µ–Ω –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü—ñ—ó —è–∫—â–æ –ø–æ—Ç—Ä—ñ–±–Ω–æ, —ñ–Ω–∞–∫—à–µ, –∑–∞–ª–∏—à—Ç–µ –ø–æ–ª–µ –ø–æ—Ä–æ–∂–Ω—ñ–º: ");
	if (!["GET", "POST", "PUT", "DELETE"].includes(method)) {
		console.error("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –º–µ—Ç–æ–¥. –î–æ—Å—Ç—É–ø–Ω—ñ: GET, POST, PUT, DELETE.");
		rl.close();
		return;
	}

	let body = null;
	if (["POST", "PUT"].includes(method)) {
		const raw = await askQuestion("–í–≤–µ–¥—ñ—Ç—å —Ç—ñ–ª–æ –∑–∞–ø–∏—Ç—É (JSON): ");
		try {
			body = JSON.parse(raw);
		} catch (error) {
			console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥—É JSON:", error.message);
			rl.close();
			return;
		}
	}

	save = await askQuestion("–ß–∏ –∑–±–µ—Ä—ñ–≥–∞—Ç–∏ –º–µ—Ç—Ä–∏–∫–∏ —É —Ñ–∞–π–ª? (y/n): ");
	if (!isYes(save)) {
		save = false;
	}

	test = new Test({ url, duration, concurrency, method, body, save, token });
}
async function main() {
	console.log("üöÄ Load Test Web Application");
	const testCases = readTestCases();
	let option;

	if (testCases != undefined && testCases.length > 0) {
		console.log("\nüì¶ –î–æ—Å—Ç—É–ø–Ω—ñ —Ç–µ—Å—Ç–æ–≤—ñ –∫–µ–π—Å–∏:");
		testCases.forEach((t, i) => {
			console.log(`${i + 1}. URL: ${t.url}, –ú–µ—Ç–æ–¥: ${t.method}, –¢—Ä–∏–≤–∞–ª—ñ—Å—Ç—å: ${t.duration}s, –ö–æ–Ω–∫—É—Ä–µ–Ω—Ü—ñ—è: ${t.concurrency}`);
		});
		option = await askQuestion("\n–í–∏–±–µ—Ä—ñ—Ç—å –æ–ø—Ü—ñ—é:\n1. –ó–∞–ø—É—Å—Ç–∏—Ç–∏ –Ω–æ–≤–∏–π —Ç–µ—Å—Ç\n2. –ó–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ —Ç–µ—Å—Ç–æ–≤–∏–π –∫–µ–π—Å\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –æ–ø—Ü—ñ—ó: ");

		if (option === "2" && testCases.length > 0) {
			const index = parseInt(await askQuestion("–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–µ–π—Å—É –¥–ª—è –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è: ")) - 1;
			if (isNaN(index) || index < 0 || index >= testCases.length) {
				console.error("‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –Ω–æ–º–µ—Ä —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∫–µ–π—Å—É.");
				rl.close();
				return;
			}
			test = new Test(testCases[index]);
		} else if (option === "1" || testCases.length === 0) {
			await newTestCase();
		} else {
			console.error("‚ùå –ù–µ–≤—ñ—Ä–Ω–∞ –æ–ø—Ü—ñ—è.");
			rl.close();
			return;
		}
	} else {
		option = "1";
		await newTestCase();
	}

	await startTesting(test);

	if (option === "1") {
		let saveTest = await askQuestion("–ó–±–µ—Ä–µ–≥—Ç–∏ —Ü–µ–π —Ç–µ—Å—Ç–æ–≤–∏–π –∫–µ–π—Å? (y/n): ");
		if (isYes(saveTest)) {
			saveTestCase(test);
		}
	}
	rl.close();
}

main().catch((err) => {
	console.error("‚ùå –ü–æ–º–∏–ª–∫–∞:", err.message);
	rl.close();
});
