import fs from "fs";

class MetricsCollector {
	constructor(save = true) {
		this.results = [];
		this.statusCounts = {};
		this.save = save;
	}

	record(result) {
		this.results.push(result);
		if (result.success && typeof result.status === "number") {
			this.statusCounts[result.status] =
				(this.statusCounts[result.status] || 0) + 1;
		}
	}

	getMetrics(duration = 1) {
		if (duration <= 0) duration = 1;

		const totalRequests = this.results.length;
		const successfulRequests = this.results.filter((r) => r.success).length;
		const failedRequests = totalRequests - successfulRequests;

		const rawAvgTime =
			totalRequests > 0
				? this.results.reduce((sum, r) => sum + r.time, 0) /
				  totalRequests
				: 0;
		const avgTime = parseFloat(rawAvgTime.toFixed(2));

		const maxTime = totalRequests
			? Math.max(...this.results.map((r) => r.time))
			: 0;
		const minTime = totalRequests
			? Math.min(...this.results.map((r) => r.time))
			: 0;
		const rps = parseFloat((totalRequests / duration).toFixed(2));

		const stddev = totalRequests
			? parseFloat(
					Math.sqrt(
						this.results.reduce(
							(sum, r) => sum + Math.pow(r.time - rawAvgTime, 2),
							0
						) / totalRequests
					).toFixed(2)
			  )
			: 0;

		const sorted = [...this.results.map((r) => r.time)].sort(
			(a, b) => a - b
		);
		const p95 = sorted[Math.floor(0.95 * sorted.length)] || 0;
		const p99 = sorted[Math.floor(0.99 * sorted.length)] || 0;

		return {
			requestUrl: this.results[0]?.requestUrl || null,
			requestBody: this.results[0]?.requestBody || null,
			requestMethod: this.results[0]?.requestMethod || null,
			totalRequests,
			successfulRequests,
			failedRequests,
			avgTime,
			maxTime,
			minTime,
			rps,
			stddev,
			p95,
			p99,
			statusCounts: this.statusCounts,
			timestamp: new Date().toISOString(),
		};
	}

	printSummary(duration = 1) {
		const m = this.getMetrics(duration);

		console.log(`\n=== –ü—ñ–¥—Å—É–º–∫–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ===`);
		console.log(`–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤: ${m.totalRequests}`);
		console.log(`–£—Å–ø—ñ—à–Ω—ñ –∑–∞–ø–∏—Ç–∏: ${m.successfulRequests}`);
		console.log(`–ù–µ—É—Å–ø—ñ—à–Ω—ñ –∑–∞–ø–∏—Ç–∏: ${m.failedRequests}`);
		console.log(`–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${m.avgTime} –º—Å`);
		console.log(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${m.maxTime} –º—Å`);
		console.log(`–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${m.minTime} –º—Å`);
		console.log(`–ó–∞–ø–∏—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥—É (RPS): ${m.rps}`);
		console.log(`üìâ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: ${m.stddev} –º—Å`);
		console.log(`95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: ${m.p95} –º—Å`);
		console.log(`99-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: ${m.p99} –º—Å`);
		console.log(`–°—Ç–∞—Ç—É—Å–∏ –∑–∞–ø–∏—Ç—ñ–≤:`);
		for (const [code, count] of Object.entries(m.statusCounts)) {
			console.log(`–ö–æ–¥ ${code}: ${count}`);
		}

		const errorMessages = this.results
			.filter((r) => !r.success && r.error)
			.map((r) => r.error)
			.join("\n");

		if (errorMessages) {
			console.log(
				`–ü–æ–º–∏–ª–∫–∏, —è–∫—ñ –≤–∏–Ω–∏–∫–ª–∏ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:\n${errorMessages}`
			);
		}
		this.save && this.saveToFile("metrics.json", duration);
	}

	saveToFile(filename = "metrics.json", duration = 1) {
		if (fs.existsSync(filename)) {
			console.warn(
				`‚ö†Ô∏è –§–∞–π–ª "${filename}" –≤–∂–µ —ñ—Å–Ω—É—î. –í—ñ–Ω –±—É–¥–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω–∏–π.`
			);
		}
		const data = {
			metrics: this.getMetrics(duration),
			results: this.results,
		};
		fs.writeFileSync(filename, JSON.stringify(data, null, 2), "utf-8");
		console.log(`üìÅ –ú–µ—Ç—Ä–∏–∫–∏ –∑–±–µ—Ä–µ–∂–µ–Ω–æ —É —Ñ–∞–π–ª "${filename}"`);
	}

	loadFromFile(filename = "metrics.json") {
		if (fs.existsSync(filename)) {
			const raw = fs.readFileSync(filename, "utf-8");
			const data = JSON.parse(raw);
			this.results = data.results || [];
			this.statusCounts = data.metrics?.statusCounts || {};
			console.log(`üìÇ –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–æ –∑ —Ñ–∞–π–ª—É "${filename}"`);
		} else {
			console.warn(`‚ö†Ô∏è –§–∞–π–ª "${filename}" –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ`);
		}
	}
}

export default MetricsCollector;
