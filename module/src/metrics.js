let results = [];

function record(result) {
	results.push(result);
}

function printSummary(duration) {
	const totalRequests = results.length;
	const successfulRequests = results.filter((r) => r.success).length;
	const failedRequests = totalRequests - successfulRequests;

	const rawAvgTime =
		results.reduce((sum, r) => sum + r.time, 0) / totalRequests;
	const avgTime = rawAvgTime.toFixed(2);

	const maxTime = Math.max(...results.map((r) => r.time));
	const minTime = Math.min(...results.map((r) => r.time));
	const rps = (totalRequests / duration).toFixed(2);

	const stddev = Math.sqrt(
		results.reduce((sum, r) => sum + Math.pow(r.time - rawAvgTime, 2), 0) /
			totalRequests
	).toFixed(2);

	const sorted = results.map((r) => r.time).sort((a, b) => a - b);
	const p95 = sorted[Math.floor(0.95 * sorted.length)];
	const p99 = sorted[Math.floor(0.99 * sorted.length)];

	const errorMessages = results
		.filter((r) => !r.success && r.error)
		.map((r) => r.error)
		.join("\n");

	const statusCounts = {};
	results.forEach((result) => {
		if (result.success && typeof result.status === "number") {
			statusCounts[result.status] =
				(statusCounts[result.status] || 0) + 1;
		}
	});

	console.log(`\n=== –ü—ñ–¥—Å—É–º–∫–∏ —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è ===`);
	console.log(`–ó–∞–≥–∞–ª—å–Ω–∞ –∫—ñ–ª—å–∫—ñ—Å—Ç—å –∑–∞–ø–∏—Ç—ñ–≤: ${totalRequests}`);
	console.log(`–£—Å–ø—ñ—à–Ω—ñ –∑–∞–ø–∏—Ç–∏: ${successfulRequests}`);
	console.log(`–ù–µ—É—Å–ø—ñ—à–Ω—ñ –∑–∞–ø–∏—Ç–∏: ${failedRequests}`);
	console.log(`–°–µ—Ä–µ–¥–Ω—ñ–π —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${avgTime} –º—Å`);
	console.log(`–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–∏–π —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${maxTime} –º—Å`);
	console.log(`–ú—ñ–Ω—ñ–º–∞–ª—å–Ω–∏–π —á–∞—Å –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ: ${minTime} –º—Å`);
	console.log(`–ó–∞–ø–∏—Ç–∏ –≤ —Å–µ–∫—É–Ω–¥—É (RPS): ${rps}`);
	console.log(`üìâ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–µ –≤—ñ–¥—Ö–∏–ª–µ–Ω–Ω—è: ${stddev} –º—Å`);
	console.log(`95-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: ${p95} –º—Å`);
	console.log(`99-–π –ø—Ä–æ—Ü–µ–Ω—Ç–∏–ª—å: ${p99} –º—Å`);
	console.log(`–°—Ç–∞—Ç—É—Å–∏ –∑–∞–ø–∏—Ç—ñ–≤:`);
	for (const [code, count] of Object.entries(statusCounts)) {
		console.log(`–ö–æ–¥ ${code}: ${count}`);
	}
	if (errorMessages) {
		console.log(
			`–ü–æ–º–∏–ª–∫–∏, —è–∫—ñ –≤–∏–Ω–∏–∫–ª–∏ –ø—ñ–¥ —á–∞—Å —Ç–µ—Å—Ç—É–≤–∞–Ω–Ω—è:\n${errorMessages}`
		);
	}
}

export { printSummary, record };
